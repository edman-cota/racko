{"version":3,"sources":["components/Racko.js","components/Start.js","App.js","reportWebVitals.js","index.js"],"names":["socket","Start","useState","roomCode","setRoomCode","username","setUsername","className","style","color","src","display","justifyContent","width","padding","flexWrap","type","placeholder","onChange","event","target","value","paddingLeft","to","uuidv4","slice","isAscending","arr","every","x","i","Racko","props","data","queryString","parse","location","search","history","useHistory","room","roomFull","setRoomFull","users","setUsers","currentUser","setCurrentUser","message","setMessage","messages","setMessages","array","length","j","Math","floor","random","temp","shuffle","Array","keys","deck","setDeck","discartedDeck","setDiscartedDeck","player1Deck","setPlayer1Deck","player2Deck","setPlayer2Deck","player3Deck","setPlayer3Deck","player4Deck","setPlayer4Deck","gameOver","setGameOver","turn","setTurn","winner","setWinner","isChatBoxHidden","setChatBoxHidden","deckPressed","setDeckPressed","currentDeckCard","setCurrentDeckCard","takeDeckCard","setTakeDeckCard","deckCardPosition","setDeckCardPosition","toggleChatBox","chatBody","document","querySelector","useEffect","io","connect","forceNew","reconnectionAttempts","timeout","transports","emit","name","error","off","e","on","playerType","deckCard","deckDisabled","scrollTop","scrollHeight","handlePressDeck","alert","push","map","u","background","height","alignItems","marginRight","c","border","marginLeft","cursor","onClick","indexOf","Object","assign","disabled","class","msg","user","text","onKeyPress","key","preventDefault","sendMessage","tempDeck","splice","tempCard","tempMainDeck","marginTop","href","memo","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.28fba94e.chunk.js","sourcesContent":["import React, { useEffect, useState, memo } from \"react\";\nimport { useHistory } from \"react-router\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\n\nconst ENDPOINT = \"http://localhost:8000\";\nlet socket;\n\nconst shuffle = (array) => {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nconst isAscending = (arr) => {\n  return arr.every(function (x, i) {\n    return i === 0 || x >= arr[i - 1];\n  });\n};\n\nconst Racko = (props) => {\n  const data = queryString.parse(props.location.search);\n  const history = useHistory();\n  const [room] = useState(data.roomCode);\n  const [roomFull, setRoomFull] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const [deck, setDeck] = useState(shuffle([...Array(61).keys()]));\n  const [discartedDeck, setDiscartedDeck] = useState([]);\n\n  const [player1Deck, setPlayer1Deck] = useState([]);\n  const [player2Deck, setPlayer2Deck] = useState([]);\n  const [player3Deck, setPlayer3Deck] = useState([]);\n  const [player4Deck, setPlayer4Deck] = useState([]);\n\n  const [gameOver, setGameOver] = useState(false);\n  const [turn, setTurn] = useState(\"\");\n  const [winner, setWinner] = useState(\"\");\n\n  const [isChatBoxHidden, setChatBoxHidden] = useState(true);\n  const [deckPressed, setDeckPressed] = useState(false);\n  const [currentDeckCard, setCurrentDeckCard] = useState(\"\");\n  const [takeDeckCard, setTakeDeckCard] = useState(false);\n  const [deckCardPosition, setDeckCardPosition] = useState(0);\n\n  const toggleChatBox = () => {\n    const chatBody = document.querySelector(\".chat-body\");\n    if (isChatBoxHidden) {\n      chatBody.style.display = \"block\";\n      setChatBoxHidden(false);\n    } else {\n      chatBody.style.display = \"none\";\n      setChatBoxHidden(true);\n    }\n  };\n\n  useEffect(() => {\n    const connectionOptions = {\n      forceNew: true,\n      reconnectionAttempts: \"Infinity\",\n      timeout: 10000,\n      transports: [\"websocket\"],\n    };\n    socket = io.connect(ENDPOINT, connectionOptions);\n\n    socket.emit(\"join\", { room, name: data.username }, (error) => {\n      if (error) setRoomFull(true);\n    });\n\n    return () => {\n      try {\n        //cleanup on component unmount\n        socket.emit(\"disconnect\");\n        //shut down connnection instance\n        socket.off();\n      } catch (e) {}\n    };\n  }, []);\n\n  useEffect(() => {\n    setDeckPressed(false);\n  }, [turn]);\n\n  useEffect(() => {\n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n\n    socket.on(\"currentUserData\", ({ playerType }) => {\n      setCurrentUser(playerType);\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.emit(\"initGameState\", {\n      gameOver: false,\n      turn: \"Player 1\",\n      player1Deck: deck.slice(0, 10),\n      player2Deck: deck.slice(10, 20),\n      player3Deck: deck.slice(20, 30),\n      player4Deck: deck.slice(30, 40),\n      deck: deck.slice(40, 60),\n      discartedDeck: [],\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\n      \"initGameState\",\n      ({\n        gameOver,\n        turn,\n        player1Deck,\n        player2Deck,\n        player3Deck,\n        player4Deck,\n        deck,\n        discartedDeck,\n      }) => {\n        setGameOver(gameOver);\n        setTurn(turn);\n        setPlayer1Deck(player1Deck);\n        setPlayer2Deck(player2Deck);\n        setPlayer3Deck(player3Deck);\n        setPlayer4Deck(player4Deck);\n        setDeck(deck);\n        setDiscartedDeck(discartedDeck);\n      }\n    );\n\n    socket.on(\n      \"updateGameState\",\n      ({\n        gameOver,\n        winner,\n        turn,\n        player1Deck,\n        player2Deck,\n        player3Deck,\n        player4Deck,\n        deck,\n        discartedDeck,\n        deckCard,\n        deckDisabled,\n      }) => {\n        gameOver && setGameOver(gameOver);\n        winner && setWinner(winner);\n        turn && setTurn(turn);\n        player1Deck && setPlayer1Deck(player1Deck);\n        player2Deck && setPlayer2Deck(player2Deck);\n        player3Deck && setPlayer3Deck(player3Deck);\n        player4Deck && setPlayer4Deck(player4Deck);\n\n        deck && setDeck(deck);\n        discartedDeck && setDiscartedDeck(discartedDeck);\n        setCurrentDeckCard(deckCard);\n      }\n    );\n\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n\n      const chatBody = document.querySelector(\".chat-body\");\n      chatBody.scrollTop = chatBody.scrollHeight;\n    });\n  }, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    if (message) {\n      socket.emit(\"sendMessage\", { message: message }, () => {\n        setMessage(\"\");\n      });\n    }\n  };\n\n  const handlePressDeck = () => {\n    setDeckPressed(true);\n    const deckCard = deck[0];\n\n    socket.emit(\"updateGameState\", {\n      deckCard,\n    });\n  };\n\n  const handleDeckCardDiscard = () => {\n    const tempDeck = deck;\n    tempDeck.splice(0, 1);\n    alert(\"Card discarted, turn changed\");\n    socket.emit(\"updateGameState\", {\n      deck: tempDeck,\n      discartedDeck: [...discartedDeck, currentDeckCard],\n      turn:\n        currentUser === \"Player 1\"\n          ? \"Player 2\"\n          : currentUser === \"Player 2\"\n          ? \"Player 3\"\n          : currentUser === \"Player 3\"\n          ? \"Player 4\"\n          : \"Player 1\",\n    });\n\n    if (deck.length === 1) {\n      socket.emit(\"updateGameState\", {\n        deck: [...discartedDeck, currentDeckCard],\n      });\n    }\n  };\n\n  const checkWinner = () => {\n    if (currentUser === \"Player 1\") {\n      if (isAscending(player1Deck)) {\n        socket.emit(\"updateGameState\", { gameOver: true, winner: \"Player 1\" });\n      }\n    } else if (currentUser === \"Player 2\") {\n      if (isAscending(player2Deck)) {\n        socket.emit(\"updateGameState\", { gameOver: true, winner: \"Player 2\" });\n      }\n    } else if (currentUser === \"Player 3\") {\n      if (isAscending(player3Deck)) {\n        socket.emit(\"updateGameState\", { gameOver: true, winner: \"Player 3\" });\n      }\n    } else {\n      if (isAscending(player4Deck)) {\n        socket.emit(\"updateGameState\", { gameOver: true, winner: \"Player 4\" });\n      }\n    }\n  };\n\n  const handleDeckCardTake = () => {\n    setTakeDeckCard(true);\n  };\n\n  const handleChangeCard = () => {\n    setTakeDeckCard(false);\n    let tempDeck = [];\n    let tempCard = \"\";\n    let tempMainDeck = [];\n    if (currentUser === \"Player 1\") {\n      tempDeck = player1Deck;\n      tempCard = tempDeck[deckCardPosition];\n      tempDeck[deckCardPosition] = currentDeckCard;\n      tempMainDeck = deck;\n      tempMainDeck.splice(0, 1);\n      socket.emit(\"updateGameState\", {\n        player1Deck: tempDeck,\n        turn: \"Player 2\",\n        deck: tempMainDeck,\n        discartedDeck: [...discartedDeck, tempCard],\n      });\n    } else if (currentUser === \"Player 2\") {\n      tempDeck = player2Deck;\n      tempCard = tempDeck[deckCardPosition];\n      tempDeck[deckCardPosition] = currentDeckCard;\n      tempMainDeck = deck;\n      tempMainDeck.splice(0, 1);\n      socket.emit(\"updateGameState\", {\n        player2Deck: tempDeck,\n        turn: \"Player 3\",\n        deck: tempMainDeck,\n        discartedDeck: [...discartedDeck, tempCard],\n      });\n    } else if (currentUser === \"Player 3\") {\n      tempDeck = player3Deck;\n      tempCard = tempDeck[deckCardPosition];\n      tempDeck[deckCardPosition] = tempCard;\n      tempMainDeck = deck;\n      tempMainDeck.splice(0, 1);\n      socket.emit(\"updateGameState\", {\n        player3Deck: tempDeck,\n        turn: \"Player 4\",\n        deck: tempMainDeck,\n        discartedDeck: [...discartedDeck, tempCard],\n      });\n    } else {\n      tempDeck = player4Deck;\n      tempCard = tempDeck[deckCardPosition];\n      tempDeck[deckCardPosition] = currentDeckCard;\n      tempMainDeck = deck;\n      tempMainDeck.splice(0, 1);\n      socket.emit(\"updateGameState\", {\n        player4Deck: tempDeck,\n        turn: \"Player 1\",\n        deck: tempMainDeck,\n        discartedDeck: [...discartedDeck, tempCard],\n      });\n    }\n    if (deck.length === 1) {\n      socket.emit(\"updateGameState\", {\n        deck: [...discartedDeck, tempCard],\n      });\n    }\n    checkWinner();\n    alert(\"Card taken, turn changed\");\n  };\n\n  useEffect(() => {\n    if (gameOver) {\n      alert(\"Game Over!!!: \" + \"The winner is: \" + winner);\n      history.push(\"/\");\n    }\n  }, []);\n\n  return (\n    <div className='game-main-container'>\n      {!roomFull ? (\n        <>\n          {users.length < 4 && <h1>Code: {room}</h1>}\n          {users.length < 4 && users.map((u) => <h3>{u.name}</h3>)}\n          {users.length === 4 && (\n            <div>\n              <h1>Welcome to Rack-O</h1>\n              <div\n                style={{ background: \"red\", height: \"30vh\", display: \"flex\" }}\n              >\n                <div\n                  style={{\n                    width: \"50%\",\n                    background: \"green\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    flexWrap: \"wrap\",\n                  }}\n                >\n                  <h4 style={{ marginRight: \"10px\" }}>Player 4</h4>\n                  {player4Deck.map((c) => (\n                    <div\n                      style={{\n                        background: \"purple\",\n                        height: \"100px\",\n                        width: \"75px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        border: \"4px solid black\",\n                        marginLeft: \"6px\",\n                        cursor: \"pointer\",\n                      }}\n                    >\n                      {c}\n                    </div>\n                  ))}\n                </div>\n                <div\n                  style={{\n                    width: \"50%\",\n                    background: \"blue\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    flexWrap: \"wrap\",\n                  }}\n                >\n                  <h4 style={{ marginRight: \"10px\" }}>Player 3</h4>\n                  {player3Deck.map((c) => (\n                    <div\n                      style={{\n                        background: \"purple\",\n                        height: \"100px\",\n                        width: \"75px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        border: \"4px solid black\",\n                        marginLeft: \"6px\",\n                        cursor: \"pointer\",\n                      }}\n                    >\n                      {c}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div\n                style={{ background: \"green\", height: \"30vh\", display: \"flex\" }}\n              >\n                <div\n                  style={{\n                    width: \"50%\",\n                    background: \"blue\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    flexWrap: \"wrap\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <h4 style={{ marginRight: \"10px\" }}>\n                    Player 2: {users[1].name}\n                  </h4>\n                  {player2Deck.map((c) => (\n                    <div\n                      style={{\n                        background: \"purple\",\n                        height: \"100px\",\n                        width: \"75px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        border: \"4px solid black\",\n                        marginLeft: \"6px\",\n                        cursor: \"pointer\",\n                      }}\n                      onClick={(e) => {\n                        let i = player2Deck.indexOf(c);\n\n                        setPlayer2Deck(\n                          Object.assign([], player2Deck, { [i]: 80 })\n                        );\n                      }}\n                    >\n                      {c}\n                    </div>\n                  ))}\n                </div>\n                <div\n                  style={{\n                    width: \"50%\",\n                    background: \"green\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    flexWrap: \"wrap\",\n                  }}\n                >\n                  <h4 style={{ marginRight: \"10px\" }}>\n                    Player 1: {users[0].name}\n                  </h4>\n                  {player1Deck.map((c) => (\n                    <div\n                      style={{\n                        background: \"purple\",\n                        height: \"100px\",\n                        width: \"75px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        border: \"4px solid black\",\n                        marginLeft: \"6px\",\n                        cursor: \"pointer\",\n                      }}\n                    >\n                      {c}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className='deck-container'>\n                {currentUser === \"Player 1\" && (\n                  <button\n                    onClick={handlePressDeck}\n                    className='deck'\n                    disabled={turn !== \"Player 1\" || deckPressed}\n                  >\n                    Deck\n                  </button>\n                )}\n\n                {currentUser === \"Player 2\" && (\n                  <button\n                    onClick={handlePressDeck}\n                    className='deck'\n                    disabled={turn !== \"Player 2\" || deckPressed}\n                  >\n                    Deck\n                  </button>\n                )}\n\n                {currentUser === \"Player 3\" && (\n                  <button\n                    onClick={handlePressDeck}\n                    className='deck'\n                    disabled={turn !== \"Player 3\" || deckPressed}\n                  >\n                    Deck\n                  </button>\n                )}\n\n                {currentUser === \"Player 4\" && (\n                  <button\n                    onClick={handlePressDeck}\n                    className='deck'\n                    disabled={turn !== \"Player 4\" || deckPressed}\n                  >\n                    Deck\n                  </button>\n                )}\n\n                <h3>Turn: {turn}</h3>\n                <div className='chatBoxWrapper'>\n                  <div className='chat-box chat-box-player1'>\n                    <div className='chat-head'>\n                      <h2>Chat Box</h2>\n                      {!isChatBoxHidden ? (\n                        <span onClick={toggleChatBox} class='material-icons'>\n                          keyboard_arrow_down\n                        </span>\n                      ) : (\n                        <span onClick={toggleChatBox} class='material-icons'>\n                          keyboard_arrow_up\n                        </span>\n                      )}\n                    </div>\n                    <div className='chat-body'>\n                      <div className='msg-insert'>\n                        {messages.map((msg) => {\n                          return (\n                            <div className='msg-send'>\n                              {`From: ${msg.user} ->  ${msg.text}`}\n                            </div>\n                          );\n                        })}\n                      </div>\n                      <div className='chat-text'>\n                        <input\n                          type='text'\n                          placeholder='Type a message...'\n                          value={message}\n                          onChange={(event) => setMessage(event.target.value)}\n                          onKeyPress={(event) =>\n                            event.key === \"Enter\" && sendMessage(event)\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div>\n                {currentUser === turn && deckPressed && (\n                  <div class='card-from-deck'>\n                    <div\n                      style={{\n                        background: \"purple\",\n                        height: \"100px\",\n                        width: \"75px\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        border: \"4px solid black\",\n                        marginLeft: \"6px\",\n                        cursor: \"pointer\",\n                      }}\n                    >\n                      {currentDeckCard}\n                    </div>\n                    <div>\n                      {/* <input\n                      type='text'\n                      placeholder='Deck Position'\n                    /> */}\n                      <button\n                        onClick={handleDeckCardTake}\n                        className='btn take'\n                        type='submit'\n                      >\n                        Take\n                      </button>\n                      <button\n                        onClick={handleDeckCardDiscard}\n                        className='btn discard'\n                        type='submit'\n                        disabled={takeDeckCard}\n                      >\n                        Discard\n                      </button>\n                    </div>\n                    {takeDeckCard && (\n                      <div>\n                        <input\n                          type='number'\n                          placeholder='Position'\n                          value={deckCardPosition}\n                          onChange={(e) => setDeckCardPosition(e.target.value)}\n                        ></input>\n                        <button onClick={handleChangeCard}>Accept</button>\n                      </div>\n                    )}\n                  </div>\n                )}\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    marginTop: \"14px\",\n                    color: \"red\",\n                  }}\n                >\n                  {currentUser === \"Player 1\" && (\n                    <h1>Hi Player 1, you rock!</h1>\n                  )}\n\n                  {currentUser === \"Player 2\" && (\n                    <h1>Hi Player 2, you're the best!</h1>\n                  )}\n\n                  {currentUser === \"Player 3\" && (\n                    <h1>Hi Player 3, keep going!</h1>\n                  )}\n\n                  {currentUser === \"Player 4\" && <h1>Hi Player 4, lumos!</h1>}\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      ) : (\n        <h1>Room full</h1>\n      )}\n\n      <br />\n      <a href='/'>\n        <button className='game-button red'>Quit</button>\n      </a>\n    </div>\n  );\n};\n\nexport default memo(Racko);\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"../styles/start.css\";\n\nconst Start = () => {\n  const [roomCode, setRoomCode] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n\n  return (\n    <div className='Homepage-Container'>\n      <h1 style={{ color: \"white\" }}>Rack-O - AndresQuinto, Mirka M, Oscar de Leon</h1>\n      <img\n        src='https://m.media-amazon.com/images/I/71ERH-4PeWL._AC_SL1500_.jpg'\n        className='Homepage-background-image'\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          width: \"50%\",\n          padding: \"0 400px\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <input\n          type='text'\n          placeholder='Username'\n          onChange={(event) => setUsername(event.target.value)}\n          className='Homepage-input'\n          style={{ paddingLeft: \"10px\" }}\n        />\n        {username !== \"\" && (\n          <input\n            type='text'\n            placeholder='Game Code'\n            onChange={(event) => setRoomCode(event.target.value)}\n            className='Homepage-input'\n            style={{ paddingLeft: \"10px\" }}\n          />\n        )}\n\n        {username !== \"\" && (\n          <Link\n            to={`/racko?roomCode=${uuidv4().slice(0, 8)}&username=${username}`}\n          >\n            <button className='Homepage-button CreateRoom-button'>\n              Create Room\n            </button>\n          </Link>\n        )}\n        {roomCode !== \"\" && (\n          <Link to={`/racko?roomCode=${roomCode}&username=${username}`}>\n            <button className='Homepage-button JoinRoom-button'>\n              Join Room\n            </button>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Start;\n","import { Route } from \"react-router-dom\";\nimport Start from \"./components/Start\";\nimport Racko from \"./components/Racko\";\nconst App = () => {\n  return (\n    <div className='App'>\n      <Route path='/' exact component={Start} />\n      <Route path='/racko' component={Racko} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}